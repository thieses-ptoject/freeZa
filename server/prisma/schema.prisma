// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id
  firstName     String
  lastName      String
  email         String  @unique
  image         String  @db.Text
  strawberries  Int     @default(5)
  rate          Int     @default(0)
  level         String  @default("BabyGiver")
  accountType   Boolean @default(false)
  nbrOfDonation Int     @default(0)
  nbrOfTakes    Int     @default(0)
  address       String
  phone         String
  Items    Item[]
  Comments Comments[]

  Rater          Rate[]           @relation("rater" ) 
  Rated          Rate[]           @relation("rated")
  Favourite      Favourite[]
  GiversFollower GiversFollowed[] @relation("follower")
  GiversFollowed GiversFollowed[] @relation("followed")
  Giver          Appointments[]   @relation("giver")
  Reciver        Appointments[]   @relation("reciver")
  Like           Like[]
  Posts          Posts[]
}

model Item {
  id           Int            @id @default(autoincrement())
  name         String
  description  String         @db.Text
  image        String[]       @db.Text
  strawberries Int
  type         String
  location     String
  state        String
  exclusive    Boolean
  createdAt    DateTime       @default(now())
  owner        User           @relation(fields: [ownerId], references: [id] , onDelete: Cascade)
  ownerId      String
  types        Types          @relation(fields: [typeId], references: [id] , onDelete: Cascade)
  typeId       Int
  Favourite    Favourite[]
  Appointments Appointments[]
}

model Admin {
  id    String @id
  name  String
  image String @db.Text
  email String
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  Types Types[]
}

model Types {
  id         Int      @id @default(autoincrement())
  type       String
  category   Category @relation(fields: [categoryId], references: [id] , onDelete: Cascade)
  categoryId Int
  Item       Item[]
}

model Posts {
  id       Int        @id @default(autoincrement())
  image    String?    @db.Text
  body     String     @db.Text
  createdAt    DateTime       @default(now())
  user     User       @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId   String
  Comments Comments[]
  Like     Like[]
}

model Comments {
  id     Int    @id @default(autoincrement())
  body   String @db.Text
  createdAt    DateTime       @default(now())
  post   Posts  @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId String
}

model Like {
  id      Int    @id @default(autoincrement())  
  user    User   @relation(fields: [likerId], references: [id] ,onDelete: Cascade)
  likerId String
  post    Posts  @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId  Int
  likes Int @default(0)
}

model Rate {
  id         Int    @id @default(autoincrement())
  nbrOfStars Int
  comments   String @db.Text
  rater      User   @relation("rater", fields: [raterId], references: [id], onDelete: Cascade)
  raterId    String 
  rated      User   @relation("rated", fields: [ratedId], references: [id] ,onDelete: Cascade)
  ratedId    String
}

model Favourite {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId String
  item   Item   @relation(fields: [itemId], references: [id] , onDelete: Cascade)
  itemId Int
}

model GiversFollowed {
  id         Int    @id @default(autoincrement())
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followed   User   @relation("followed", fields: [followedId], references: [id] , onDelete: Cascade)
  followedId String
}

model Appointments {
  id        Int     @id @default(autoincrement())
  time      String
  location  String
  status    Boolean @default(false)
  giver     User    @relation("giver", fields: [giverId], references: [id] , onDelete: Cascade)
  giverId   String  
  reciver   User    @relation("reciver", fields: [reciverId], references: [id] , onDelete: Cascade)
  reciverId String  
  Item      Item    @relation(fields: [ItemId], references: [id] , onDelete: Cascade)
  ItemId    Int
}
