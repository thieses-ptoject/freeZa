generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id
  firstName            String
  lastName             String
  email                String              @unique
  image                String              
  strawberries         Int              @default(5)
  rate                 Int              @default(0)
  level                String           @default("BabyGiver")
  accountType          Boolean          @default(false)
  nbrOfDonation        Int              @default(0)
  nbrOfTakes           Int              @default(0)
  address              String
  phone                String
  blocked              Boolean          @default(false)
  Giver                Appointments[]   @relation("giver")
  Reciver              Appointments[]   @relation("reciver")
  claims               Claims[]
  Comments             Comments[]
  Favourite            Favourite[]
  GiversFollowed       GiversFollowed[]    @relation("followed")
  GiversFollower       GiversFollowed[]    @relation("follower")
  Items                Item[]
  Like                 Like[]
  Recievermessage      Messages[]          @relation("reciversmessage")
  sender               Messages[]          @relation("sender")
  RecieverNotification Notifications[]     @relation("notificationreciver")
  SenderNotification   Notifications[]     @relation("notificationsender")
  Posts                Posts[]
  Rated                Rate[]              @relation("rated")
  Rater                Rate[]              @relation("rater")
  recivernotificationsRate    NotificationsRate[]   @relation("notificationreciverrate")
  NotificationsRate            NotificationsRate[]            @relation("notificationsenderrate")
}

model Item {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  image        String[]
  strawberries Int
  type         String
  location     String
  state        String
  exclusive    Boolean
  createdAt    DateTime       @default(now())
  ownerId      String
  typeId       Int
  Appointments Appointments[]
  Favourite    Favourite[]
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  types        Types          @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model Admin {
  id     String   @id
  name   String
  image  String
  email  String
  claims Claims[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  image String
  Types Types[]
}

model Types {
  id         Int      @id @default(autoincrement())
  type       String
  categoryId Int
  Item       Item[]
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Posts {
  id        Int        @id @default(autoincrement())
  image     String?
  body      String
  createdAt DateTime   @default(now())
  userId    String
  Comments  Comments[]
  Like      Like[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())
  postId    Int
  userId    String
  post      Posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id      Int    @id @default(autoincrement())
  likerId String
  postId  Int
  likes   Int    @default(0)
  user    User   @relation(fields: [likerId], references: [id], onDelete: Cascade)
  post    Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Rate {
  id         Int    @id @default(autoincrement())
  nbrOfStars Int
  comments   String
  raterId    String
  ratedId    String
  rated      User   @relation("rated", fields: [ratedId], references: [id], onDelete: Cascade)
  rater      User   @relation("rater", fields: [raterId], references: [id], onDelete: Cascade)
}

model Favourite {
  id     Int    @id @default(autoincrement())
  userId String
  itemId Int
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GiversFollowed {
  id         Int    @id @default(autoincrement())
  followerId String
  followedId String
  followed   User   @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
}

model Appointments {
  id        Int     @id @default(autoincrement())
  time      String
  location  String
  status    Boolean @default(false)
  giverId   String
  reciverId String
  ItemId    Int
  Item      Item    @relation(fields: [ItemId], references: [id], onDelete: Cascade)
  giver     User    @relation("giver", fields: [giverId], references: [id], onDelete: Cascade)
  reciver   User    @relation("reciver", fields: [reciverId], references: [id], onDelete: Cascade)
}

model Messages {
  id             Int      @id @default(autoincrement())
  message        String
  senderId       String
  recieverId     String
  createdAt      DateTime @default(now())
  image          String?  @default("")
  recivermessage User     @relation("reciversmessage", fields: [recieverId], references: [id], onDelete: Cascade)
  sender         User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
}

model Claims {
  id             Int      @id @default(autoincrement())
  claim          String
  adminId        String
  userId         String
  createdAt      DateTime @default(now())
  recivermessage Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  sender         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notifications {
  id                   Int      @id @default(autoincrement())
  isRead               String
  date                 DateTime @default(now())
  senderId             String
  reciever             String
  recivernotifications User     @relation("notificationreciver", fields: [reciever], references: [id], onDelete: Cascade)
  sendernotification   User     @relation("notificationsender", fields: [senderId], references: [id], onDelete: Cascade)
}

model NotificationsRate {
  id                       Int      @id @default(autoincrement())
  date                     DateTime @default(now())
  senderId                 String
  reciever                 String
  rate                     Int      @default(0)
  isRead                   Boolean  @default(false)
  recivernotificationsRate User     @relation("notificationreciverrate", fields: [reciever], references: [id], onDelete: Cascade)
  sendernotificationRate   User     @relation("notificationsenderrate", fields: [senderId], references: [id], onDelete: Cascade)
}
